// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© lao_sha

//@version=5
strategy("LaoSha_ma_kdj_dmi_strategy", overlay=true,  pyramiding=1,initial_capital = 10000, default_qty_type= strategy.percent_of_equity, default_qty_value = 100, calc_on_order_fills=false, slippage=0,commission_type=strategy.commission.percent,commission_value=0.04)
ma_slow_length = input.int(4)
ma_slow_source = input.source(close)
ma_fast_length = input.int(21)
ma_fast_source = input.source(ohlc4)
ma_slow=ta.ema(ma_slow_source,ma_slow_length)
ma_fast=ta.ema(ma_fast_source,ma_fast_length)
//===============================================================================================================================
diLength = input.int(15)
adxSmoothing=input.int(20)
[diplus,diminus,adx]=ta.dmi(diLength, adxSmoothing)
//===============================================================================================================================
ilong = input.int(9, title='period')
isig = input.int(3, title='signal')
bcwsma(s, l, m) =>
    _bcwsma = float(na)
    _s = s
    _l = l
    _m = m
    _bcwsma := (_m * _s + (_l - _m) * nz(_bcwsma[1])) / _l
    _bcwsma
c = close
h = ta.highest(high, ilong)
l = ta.lowest(low, ilong)
RSV = 100 * ((c - l) / (h - l))
pK = bcwsma(RSV, isig, 1)
pD = bcwsma(pK, isig, 1)
pJ = 3 * pK - 2 * pD
KDJ = math.avg(pD, pJ, pK)
plot(pK, title='% K', color=color.new(color.orange, 0))
plot(pD, title='% D', color=color.new(color.lime, 0))
plot(pJ, title='% J', color=color.new(color.fuchsia, 0))
plot(KDJ, title='KDJ', color=color.new(color.white, 0))
plot(ma_slow)
plot(ma_fast)
//===============================================================================================================================

long=ma_slow>ma_fast and pJ<30 and diplus > diminus
short= ma_slow<ma_fast and pJ>70 and diplus < diminus
//BACKTESTING inputs --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ACT_BT              =                   input.bool(true,                             title="Backtest",                                                                                 group= "BACKTEST")
testStartYear       =                   input.int(2018,                             title="start year",                                         minval = 1997, maxval = 3000,                                                   group= "BACKTEST") 
testStartMonth      =                   input.int(01,                               title="start month",                                        minval = 1, maxval = 12,                                                        group= "BACKTEST")
testStartDay        =                   input.int(01,                               title="start day",                                          minval = 1, maxval = 31,                                                        group= "BACKTEST")
testPeriodStart     =                   timestamp(testStartYear,testStartMonth,testStartDay,0,0)
testStopYear        =                   input.int(2220,                             title="stop year",                                          minval=1980, maxval = 3500,                                                     group= "BACKTEST")
testStopMonth       =                   input.int(12,                               title="stop month",                                         minval=1, maxval=12,                                                            group= "BACKTEST")
testStopDay         =                   input.int(31,                               title="stop day",                                           minval=1, maxval=31,                                                            group= "BACKTEST")
testPeriodStop      =                   timestamp(testStopYear, testStopMonth, testStopDay, 0, 0)
testPeriod          =                   time >= testPeriodStart and time <= testPeriodStop ? true : false

// Backtest  ==================================================================================================================================================================================================================================================================================================================================

//Signals======================================================================================================================================================================================================================

if long 
    strategy.entry("L", strategy.long, when=ACT_BT and testPeriod)
    
if short
    strategy.entry("S", strategy.short, when=ACT_BT and testPeriod)
    
per(pcnt) =>
    strategy.position_size != 0 ? math.round(pcnt / 100 * strategy.position_avg_price / syminfo.mintick) : float(na)
stoploss=input.float(title=" stop loss", defval=6, minval=0.01)
los = per(stoploss)
q=input.int(title=" qty percent", defval=100, minval=1)

tp=input.float(title=" Take profit", defval=20, minval=0.01)

strategy.exit("tp", qty_percent = q, profit = per(tp), loss = los)
